
//ejemploArchivo.cpp
#include <iostream>
#include <fstream>
#include <conio.h>
#include "ABMamigo.h"

using namespace std;


int main() {
	ABMamigo* amig = new ABMamigo("amigOO.dat");
	amig->adicionarNuevo();
	//amig->listar();
	amig->buscarReg();
	//amig->eliminarReg();
	//amig->modificarReg();
	//amig->listar();
	return 0;
}




// Amigo.h
#pragma once
#include <iostream>
#include <fstream>
#include <string>

using namespace std;

class Amigo {
private:
    string nombre;
    int edad;
    char sexo;
    char estado; // 'A' = Activo, 'E' = Eliminado

public:
    Amigo();
    Amigo(string nom, int ed, char sx);

    void setAmigo(string nom, int ed, char sx);

    string getNombre();
    int getEdad();
    char getSexo();
    char getEstado();

    void guardarArchivo(ofstream& fsalida);
    bool leerArchivo(ifstream& fentrada);
    bool eliminar(fstream& fes, int nroReg);
    bool modificar(fstream& fes, int nroReg);
    bool buscar(ifstream& fentrada, int nroReg);
    int getTamBytesRegistro();
};





//Amigo.cpp
#include "Amigo.h"

Amigo::Amigo() {
    nombre = "";
    edad = 0;
    sexo = ' ';
    estado = ' ';
}

Amigo::Amigo(string nom, int ed, char sx) {
    nombre = nom;
    edad = ed;
    sexo = sx;
    estado = 'A';
}

void Amigo::setAmigo(string nom, int ed, char sx) {
    nombre = nom;
    edad = ed;
    sexo = sx;
    estado = 'A';
}

string Amigo::getNombre() {
    return nombre;
}

int Amigo::getEdad() {
    return edad;
}

char Amigo::getSexo() {
    return sexo;
}

char Amigo::getEstado() {
    return estado;
}

void Amigo::guardarArchivo(ofstream& fsalida) {
    fsalida.write(reinterpret_cast<char*>(&nombre), sizeof(nombre));
    fsalida.write(reinterpret_cast<char*>(&edad), sizeof(edad));
    fsalida.write(reinterpret_cast<char*>(&sexo), sizeof(sexo));
    fsalida.write(reinterpret_cast<char*>(&estado), sizeof(estado));
}

bool Amigo::leerArchivo(ifstream& fentrada) {
    bool k = false;
    if (fentrada.is_open()) {
        fentrada.read(reinterpret_cast<char*>(&nombre), sizeof(nombre));
        if (!fentrada.eof()) {
            fentrada.read(reinterpret_cast<char*>(&edad), sizeof(edad));
            fentrada.read(reinterpret_cast<char*>(&sexo), sizeof(sexo));
            fentrada.read(reinterpret_cast<char*>(&estado), sizeof(estado));
            k = true;
        }
    }
    else {
        cout << endl << "Archivo no existe";
    }
    return k;
}

bool Amigo::eliminar(fstream& fes, int nroReg) {
    bool k = false;
    if (fes.is_open()) {
        fes.seekg(getTamBytesRegistro() * (nroReg - 1), ios::beg);
        fes.read(reinterpret_cast<char*>(&nombre), sizeof(nombre));
        if (!fes.eof()) {
            fes.read(reinterpret_cast<char*>(&edad), sizeof(edad));
            fes.read(reinterpret_cast<char*>(&sexo), sizeof(sexo));
            fes.read(reinterpret_cast<char*>(&estado), sizeof(estado));

            estado = 'E';
            fes.seekp(getTamBytesRegistro() * (nroReg - 1), ios::beg);
            fes.write(reinterpret_cast<char*>(&nombre), sizeof(nombre));
            fes.write(reinterpret_cast<char*>(&edad), sizeof(edad));
            fes.write(reinterpret_cast<char*>(&sexo), sizeof(sexo));
            fes.write(reinterpret_cast<char*>(&estado), sizeof(estado));
            k = true;
        }
        else {
            cout << endl << "Registro no existe";
        }
    }
    else {
        cout << endl << "Archivo no existe";
    }
    return k;
}

bool Amigo::modificar(fstream& fes, int nroReg) {
    bool k = false;
    if (fes.is_open()) {
        string nomAux = nombre;
        fes.seekg(getTamBytesRegistro() * (nroReg - 1), ios::beg);
        fes.read(reinterpret_cast<char*>(&nombre), sizeof(nombre));
        if (!fes.eof()) {
            nombre = nomAux;
            estado = 'A';
            fes.seekp(getTamBytesRegistro() * (nroReg - 1), ios::beg);
            fes.write(reinterpret_cast<char*>(&nombre), sizeof(nombre));
            fes.write(reinterpret_cast<char*>(&edad), sizeof(edad));
            fes.write(reinterpret_cast<char*>(&sexo), sizeof(sexo));
            fes.write(reinterpret_cast<char*>(&estado), sizeof(estado));
            k = true;
        }
        else {
            cout << endl << "Registro no existe";
        }
    }
    else {
        cout << endl << "Archivo no existe";
    }
    return k;
}

bool Amigo::buscar(ifstream& fentrada, int nroReg) {
    bool k = false;
    if (fentrada.is_open()) {
        fentrada.seekg(getTamBytesRegistro() * (nroReg - 1), ios::beg);
        fentrada.read(reinterpret_cast<char*>(&nombre), sizeof(nombre));
        fentrada.read(reinterpret_cast<char*>(&edad), sizeof(edad));
        fentrada.read(reinterpret_cast<char*>(&sexo), sizeof(sexo));
        fentrada.read(reinterpret_cast<char*>(&estado), sizeof(estado));
        if (!fentrada.eof()) {
            k = true;
        }
    }
    else {
        cout << endl << "Archivo no existe";
    }
    return k;
}

int Amigo::getTamBytesRegistro() {
    return sizeof(nombre) + sizeof(edad) + sizeof(sexo) + sizeof(estado);






//ABMamigo.h
#pragma once
#include <iostream>
#include <fstream>
#include <string>
#include "Amigo.h"

using namespace std;

class ABMamigo {
private:
    string nomArchivo;
    Amigo* amig;

    void introducirDatos(Amigo* newReg);
    void mostrarRegistro(int nroReg);

public:
    ABMamigo(string nomArch);
    void adicionarNuevo();
    void listar();
    int buscarReg();
    void eliminarReg();
    void modificarReg();
};




//ABMamigo.cpp
#include "ABMamigo.h"

ABMamigo::ABMamigo(string nomArch) {
    nomArchivo = nomArch;
}

void ABMamigo::introducirDatos(Amigo* newReg) {
    string nombre;
    int edad;
    char sexo;

    cout << endl << endl << "Introducir los siguientes datos --->>> :" << endl;
    fflush(stdin);
    cout << "Nombre : ";
    getline(cin, nombre);
    cout << "Edad : ";
    cin >> edad;
    cout << "Sexo <F/M>: ";
    cin >> sexo;

    newReg->setAmigo(nombre, edad, sexo);
}

void ABMamigo::mostrarRegistro(int nroReg) {
    cout << endl << nroReg << ".-  " << amig->getNombre()
        << "  " << amig->getEdad()
        << "  " << amig->getSexo()
        << "  " << amig->getEstado();
}

void ABMamigo::adicionarNuevo() {
    ofstream fsalida(nomArchivo, ios::app | ios::binary);
    amig = new Amigo();
    introducirDatos(amig);
    amig->guardarArchivo(fsalida);
    fsalida.close();
}

void ABMamigo::listar() {
    int cr = 0;
    cout << endl << endl << "Los registros son --->>> : " << endl;
    amig = new Amigo();
    ifstream fentrada(nomArchivo, ios::in | ios::binary);
    while (amig->leerArchivo(fentrada)) {
        cr++;
        if (amig->getEstado() == 'A') {
            mostrarRegistro(cr);
        }
    }
    fentrada.close();
}

int ABMamigo::buscarReg() {
    int nroReg;
    cout << endl << endl << "Introducir numero de registro a buscar :  ";
    cin >> nroReg;
    amig = new Amigo();
    ifstream fentrada(nomArchivo, ios::in | ios::binary);
    if (amig->buscar(fentrada, nroReg)) {
        mostrarRegistro(nroReg);
    }
    else {
        cout << endl << "Registro no existe";
        nroReg = -1;
    }
    fentrada.close();
    return nroReg;
}

void ABMamigo::eliminarReg() {
    int nroReg = buscarReg();
    if (nroReg > 0) {
        fstream fes(nomArchivo, ios::in | ios::out | ios::binary);
        amig = new Amigo();
        if (amig->eliminar(fes, nroReg)) {
            cout << endl << "Registro eliminado correctamente " << endl;
        }
        else {
            cout << endl << "Registro no existe para eliminar" << endl;
        }
        fes.close();
    }
}

void ABMamigo::modificarReg() {
    int nroReg = buscarReg();
    if (nroReg > 0) {
        fstream fes(nomArchivo, ios::in | ios::out | ios::binary);
        amig = new Amigo();
        introducirDatos(amig);
        if (amig->modificar(fes, nroReg)) {
            cout << endl << "Modificado correctamente... " << endl;
        }
        else {
            cout << endl << "Registro no existe para modificar";
        }
        fes.close();
    }
}









